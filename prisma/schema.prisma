// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  id                   Int                   @id @default(autoincrement())
  name                 String
  code                 String                @unique @db.VarChar(10)
  createdById          Int?                  @map("createdById")
  updatedById          Int?                  @map("updatedById")
  deletedAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  createdBy            User?                 @relation("LanguageCreatedBy", fields: [createdById], references: [id])
  updatedBy            User?                 @relation("LanguageUpdatedBy", fields: [updatedById], references: [id])
  userTranslations     UserTranslation[]
  productTranslations  ProductTranslation[]
  categoryTranslations CategoryTranslation[]
  brandTranslations    BrandTranslation[]
}

model User {
  id          Int        @id @default(autoincrement())
  email       String     @unique
  name        String
  password    String
  phoneNumber String
  avatar      String?
  // chức năng quên mật khẩu hoặc xác thực 2 bước
  totpSecret  String?
  status      UserStatus @default(ACTIVE)
  roleId      Int
  deletedAt   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  devices     Device[]

  role             Role              @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders           Order[]
  refreshTokens    RefreshToken[]
  reviews          Review[]
  userTranslations UserTranslation[] @relation("UserToTranslation")
  carts            CartItem[]
  //1 user có thể tạo ra nhiều user khác
  // 1 user chỉ có thể được tạo ra bởi 1 user khác
  // Tự quan hệ 1-n
  createdById      Int?
  createdBy        User?             @relation("CreatorUsers", fields: [createdById], references: [id])
  createdUsers     User[]            @relation("CreatorUsers")
  updatedById      Int?
  updatedBy        User?             @relation("UpdatorUsers", fields: [updatedById], references: [id])
  updatedUsers     User[]            @relation("UpdatorUsers")

  sentMessages                Message[]             @relation("FromUser")
  receivedMessages            Message[]             @relation("ToUser")
  createdLanguages            Language[]            @relation("LanguageCreatedBy")
  updatedLanguages            Language[]            @relation("LanguageUpdatedBy")
  createdProducts             Product[]             @relation("ProductCreatedBy")
  updatedProducts             Product[]             @relation("ProductUpdatedBy")
  createdCategories           Category[]            @relation("CategoryCreatedBy")
  updatedCategories           Category[]            @relation("CategoryUpdatedBy")
  createdVariants             Variant[]             @relation("VariantCreatedBy")
  updatedVariants             Variant[]             @relation("VariantUpdatedBy")
  createdSKUs                 SKU[]                 @relation("SKUCreatedBy")
  updatedSKUs                 SKU[]                 @relation("SKUUpdatedBy")
  createdBrands               Brand[]               @relation("BrandCreatedBy")
  updatedBrands               Brand[]               @relation("BrandUpdatedBy")
  createdPermissions          Permission[]          @relation("PermissionCreatedBy")
  updatedPermissions          Permission[]          @relation("PermissionUpdatedBy")
  createdRoles                Role[]                @relation("RoleCreatedBy")
  updatedRoles                Role[]                @relation("RoleUpdatedBy")
  createdOrders               Order[]               @relation("OrderCreatedBy")
  updatedOrders               Order[]               @relation("OrderUpdatedBy")
  createdReviews              Review[]              @relation("ReviewCreatedBy")
  updatedReviews              Review[]              @relation("ReviewUpdatedBy")
  createdMessages             Message[]             @relation("MessageCreatedBy")
  updatedMessages             Message[]             @relation("MessageUpdatedBy")
  createdPaymentTransactions  PaymentTransaction[]  @relation("PaymentTransactionCreatedBy")
  createdProductTranslations  ProductTranslation[]  @relation("ProductTranslationCreatedBy")
  updatedProductTranslations  ProductTranslation[]  @relation("ProductTranslationUpdatedBy")
  createdCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationCreatedBy")
  updatedCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationUpdatedBy")
  createdBrandTranslations    BrandTranslation[]    @relation("BrandTranslationCreatedBy")
  updatedBrandTranslations    BrandTranslation[]    @relation("BrandTranslationUpdatedBy")
  createdUserTranslations     UserTranslation[]     @relation("UserTranslationCreatedBy")
  updatedUserTranslations     UserTranslation[]     @relation("UserTranslationUpdatedBy")
  createdCartItems            CartItem[]            @relation("CartItemCreatedBy")
  updatedCartItems            CartItem[]            @relation("CartItemUpdatedBy")
  UserTranslation             UserTranslation[]
  ProductTranslation          ProductTranslation[]
  CategoryTranslation         CategoryTranslation[]
  BrandTranslation            BrandTranslation[]
  PaymentTransaction          PaymentTransaction[]
  Message                     Message[]
  createdVariantOptions       VariantOption[]       @relation("VariantOptionCreatedBy")
  updatedVariantOptions       VariantOption[]       @relation("VariantOptionUpdatedBy")
}

model UserTranslation {
  id          Int       @id @default(autoincrement())
  userId      Int
  languageId  Int
  address     String?
  description String?
  createdById Int?      @map("createdById")
  updatedById Int?      @map("updatedById")
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation("UserToTranslation", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "UserTranslation_userId_user_fkey")
  language    Language  @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdBy   User?     @relation("UserTranslationCreatedBy", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "UserTranslation_createdBy_fkey")
  updatedBy   User?     @relation("UserTranslationUpdatedBy", fields: [updatedById], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "UserTranslation_updatedBy_fkey")
  User        User      @relation(fields: [userId], references: [id])
}

model VerificationCode {
  id        Int                  @id @default(autoincrement())
  email     String               @unique @db.VarChar(255)
  code      String               @db.VarChar(50)
  type      VerificationCodeType
  expiresAt DateTime
  createdAt DateTime             @default(now())

  @@index([email, code, type])
  @@index([expiresAt])
}

model Device {
  id           Int      @id @default(autoincrement())
  userId       Int
  createdAt    DateTime @default(now())
  isActive     Boolean  @default(true)
  lastActiveAt DateTime @updatedAt
  userAgent    String
  ip           String

  refreshTokens RefreshToken[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model RefreshToken {
  token     String   @unique @db.VarChar(1000)
  userId    Int
  deviceId  Int
  expiresAt DateTime
  createdAt DateTime @default(now())

  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expiresAt])
}

model Permission {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(500)
  description String
  path        String     @db.VarChar(1000)
  method      HTTPMethod
  createdById Int?       @map("createdById")
  updatedById Int?       @map("updatedById")
  deletedAt   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   User?      @relation("PermissionCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?      @relation("PermissionUpdatedBy", fields: [updatedById], references: [id])
  roles       Role[]
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String
  isActive    Boolean      @default(true)
  createdById Int?         @map("createdById")
  updatedById Int?         @map("updatedById")
  deletedAt   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   User?        @relation("RoleCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?        @relation("RoleUpdatedBy", fields: [updatedById], references: [id])
  users       User[]
  permissions Permission[]
}

model Product {
  id                  Int                  @id @default(autoincrement())
  base_price          Float
  virtual_price       Float
  brandId             Int
  images              String[]
  createdById         Int?                 @map("createdById")
  updatedById         Int?                 @map("updatedById")
  deletedAt           DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  brand               Brand                @relation(fields: [brandId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdBy           User?                @relation("ProductCreatedBy", fields: [createdById], references: [id])
  updatedBy           User?                @relation("ProductUpdatedBy", fields: [updatedById], references: [id])
  productTranslations ProductTranslation[]
  variants            Variant[]
  skus                SKU[]
  reviews             Review[]
  categories          Category[]
}

model ProductTranslation {
  id          Int       @id @default(autoincrement())
  productId   Int
  languageId  Int
  name        String
  description String
  createdById Int?      @map("createdById")
  updatedById Int?      @map("updatedById")
  userId      Int?
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product   @relation(fields: [productId], references: [id])
  language    Language  @relation(fields: [languageId], references: [id])
  createdBy   User?     @relation("ProductTranslationCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?     @relation("ProductTranslationUpdatedBy", fields: [updatedById], references: [id])
  user        User?     @relation(fields: [userId], references: [id])
}

model Category {
  id                   Int                   @id @default(autoincrement())
  parentCategoryId     Int?                  @map("parentCategoryId")
  createdById          Int?                  @map("createdById")
  updatedById          Int?                  @map("updatedById")
  deletedAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  parent               Category?             @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  childrenCategories   Category[]            @relation("CategoryHierarchy")
  createdBy            User?                 @relation("CategoryCreatedBy", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedBy            User?                 @relation("CategoryUpdatedBy", fields: [updatedById], references: [id], onDelete: Cascade, onUpdate: NoAction)
  categoryTranslations CategoryTranslation[]
  products             Product[]
}

model CategoryTranslation {
  id          Int       @id @default(autoincrement())
  categoryId  Int
  languageId  Int
  name        String
  description String
  createdById Int?      @map("createdById")
  updatedById Int?      @map("updatedById")
  userId      Int?
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  language    Language  @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdBy   User?     @relation("CategoryTranslationCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?     @relation("CategoryTranslationUpdatedBy", fields: [updatedById], references: [id])
  user        User?     @relation(fields: [userId], references: [id])
}

model Variant {
  id             Int             @id @default(autoincrement())
  name           String
  productId      Int
  createdById    Int?            @map("createdById")
  updatedById    Int?            @map("updatedById")
  deletedAt      DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  product        Product         @relation(fields: [productId], references: [id])
  createdBy      User?           @relation("VariantCreatedBy", fields: [createdById], references: [id])
  updatedBy      User?           @relation("VariantUpdatedBy", fields: [updatedById], references: [id])
  variantOptions VariantOption[]
}

model VariantOption {
  id          Int       @id @default(autoincrement())
  value       String
  variantId   Int
  createdById Int?      @map("createdById")
  updatedById Int?      @map("updatedById")
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  variant     Variant   @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdBy   User?     @relation("VariantOptionCreatedBy", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedBy   User?     @relation("VariantOptionUpdatedBy", fields: [updatedById], references: [id], onDelete: Cascade, onUpdate: NoAction)
  skus        SKU[]
}

model SKU {
  id                  Int                  @id @default(autoincrement())
  value               String
  price               Float
  stock               Int
  images              String[]
  productId           Int
  createdById         Int?                 @map("createdById")
  updatedById         Int?                 @map("updatedById")
  deletedAt           DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  product             Product              @relation(fields: [productId], references: [id])
  createdBy           User?                @relation("SKUCreatedBy", fields: [createdById], references: [id])
  updatedBy           User?                @relation("SKUUpdatedBy", fields: [updatedById], references: [id])
  cartItems           CartItem[]
  productSKUSnapshots ProductSKUSnapshot[]
  variantOptions      VariantOption[]
}

model Brand {
  id                Int                @id @default(autoincrement())
  logo              String
  createdById       Int?               @map("createdById")
  updatedById       Int?               @map("updatedById")
  deletedAt         DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  createdBy         User?              @relation("BrandCreatedBy", fields: [createdById], references: [id])
  updatedBy         User?              @relation("BrandUpdatedBy", fields: [updatedById], references: [id])
  products          Product[]
  brandTranslations BrandTranslation[]
  reviews           Review[]
}

model BrandTranslation {
  id          Int       @id @default(autoincrement())
  brandId     Int
  languageId  Int
  name        String
  description String
  createdById Int?      @map("createdById")
  updatedById Int?      @map("updatedById")
  userId      Int?
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  brand       Brand     @relation(fields: [brandId], references: [id])
  language    Language  @relation(fields: [languageId], references: [id])
  createdBy   User?     @relation("BrandTranslationCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?     @relation("BrandTranslationUpdatedBy", fields: [updatedById], references: [id])
  user        User?     @relation(fields: [userId], references: [id])
}

model CartItem {
  id          Int      @id @default(autoincrement())
  quantity    Int
  skuId       Int
  userId      Int
  createdById Int?     @map("createdById")
  updatedById Int?     @map("updatedById")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sku         SKU      @relation(fields: [skuId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdBy   User?    @relation("CartItemCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?    @relation("CartItemUpdatedBy", fields: [updatedById], references: [id])
}

model ProductSKUSnapshot {
  id          Int      @id @default(autoincrement())
  productName String
  price       Float
  images      String[]
  skuValue    String   @db.VarChar(1000)
  skuId       Int?
  orderId     Int?
  createdAt   DateTime @default(now())
  sku         SKU?     @relation(fields: [skuId], references: [id])
  order       Order?   @relation(fields: [orderId], references: [id])
}

model Order {
  id          Int                  @id @default(autoincrement())
  userId      Int
  status      OrderStatus
  createdById Int?                 @map("createdById")
  updatedById Int?                 @map("updatedById")
  deletedAt   DateTime?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  user        User                 @relation(fields: [userId], references: [id])
  createdBy   User?                @relation("OrderCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?                @relation("OrderUpdatedBy", fields: [updatedById], references: [id])
  items       ProductSKUSnapshot[]
}

model Review {
  id          Int       @id @default(autoincrement())
  content     String
  rating      Float
  productId   Int
  userId      Int
  brandId     Int?
  createdById Int?      @map("createdById")
  updatedById Int?      @map("updatedById")
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product   @relation(fields: [productId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  brand       Brand?    @relation(fields: [brandId], references: [id])
  createdBy   User?     @relation("ReviewCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?     @relation("ReviewUpdatedBy", fields: [updatedById], references: [id])
}

model PaymentTransaction {
  id                 Int      @id @default(autoincrement())
  gateway            String
  transactionDate    DateTime @default(now())
  accountNumber      String
  subAccount         String?
  amountIn           Int      @default(0)
  amountOut          Int      @default(0)
  accumulated        Int      @default(0)
  code               String?
  transactionContent String?
  referenceNumber    String?
  body               String?
  userId             Int?
  createdById        Int?     @map("createdById")
  createdAt          DateTime @default(now())
  user               User?    @relation(fields: [userId], references: [id])
  createdBy          User?    @relation("PaymentTransactionCreatedBy", fields: [createdById], references: [id])
}

model Message {
  id          Int       @id @default(autoincrement())
  fromUserId  Int
  toUserId    Int
  content     String
  readAt      DateTime?
  createdById Int?      @map("createdById")
  updatedById Int?      @map("updatedById")
  userId      Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  fromUser    User      @relation("FromUser", fields: [fromUserId], references: [id])
  toUser      User      @relation("ToUser", fields: [toUserId], references: [id])
  createdBy   User?     @relation("MessageCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?     @relation("MessageUpdatedBy", fields: [updatedById], references: [id])
  user        User?     @relation(fields: [userId], references: [id])
}

enum OrderStatus {
  PENDING_CONFIRMATION
  PENDING_PICKUP
  PENDING_DELIVERY
  DELIVERED
  RETURNED
  CANCELLED
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
}

enum UserStatus {
  ACTIVE
  BLOCKED
  INACTIVE
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}
